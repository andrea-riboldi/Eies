/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.micronixnetwork.pipe.gui;

import it.micronixnetwork.pipe.PipeRunner;
import it.micronixnetwork.pipe.UnitException;
import it.micronixnetwork.pipe.gui.server.PipeServer;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Observable;
import java.util.Observer;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author kobo
 */
public class GUI extends javax.swing.JFrame implements Observer {

    private ImageIcon aboutImg = new ImageIcon(getClass().getResource("/it/micronixnetwork/pipe/gui/about.png"));

    private PipeRunner pipeRunner;

    private PipeServer server;

    private ImageIcon offImage = new ImageIcon(getClass().getResource("/it/micronixnetwork/pipe/gui/off.png"));
    private ImageIcon goodImage = new ImageIcon(getClass().getResource("/it/micronixnetwork/pipe/gui/good.png"));
    private ImageIcon badImage = new ImageIcon(getClass().getResource("/it/micronixnetwork/pipe/gui/bad.png"));

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();

        PrintStream messageStream = new PrintStream(new JAreaOutputStream(workArea));
        PrintStream errorStream = new PrintStream(new JAreaOutputStream(errorArea));
        System.setOut(messageStream);
        System.setErr(errorStream);

        //Creazione server di controllo
        server = new PipeServer();

        //Avvio
        server.start();

        //Controllo presenza di un pipe in autostart
        File file = new File("autostart/pipe.xml");

        if (file.exists()) {
            pipeRunner = new PipeRunner("/" + file.getAbsolutePath());
            pipeRunner.addObserver(this);
            server.setRunner(pipeRunner);
            try {
                pipeRunner.start();
            } catch (UnitException ex) {
                System.out.println("Pipe creation fail");
                System.err.println(ex.getMessage());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pipeChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        stopButton = new javax.swing.JButton();
        semaphore = new javax.swing.JLabel();
        msgTabs = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        workArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        errorArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        fieMenu = new javax.swing.JMenu();
        openPipeMenu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenu = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenu = new javax.swing.JMenuItem();

        pipeChooser.setCurrentDirectory(new File("."));
        pipeChooser.setDialogTitle("");
        pipeChooser.setFileFilter(new PipeCustomFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Eies"); // NOI18N
        setLocationByPlatform(true);
        setName("console"); // NOI18N

        stopButton.setText("Stop");
        stopButton.setToolTipText("");
        stopButton.setAlignmentY(0.0F);
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        semaphore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        semaphore.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/micronixnetwork/pipe/gui/off.png"))); // NOI18N
        semaphore.setToolTipText("");
        semaphore.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(semaphore, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(semaphore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        workArea.setBackground(new java.awt.Color(204, 204, 204));
        workArea.setColumns(20);
        workArea.setRows(5);
        workArea.setToolTipText("");
        jScrollPane1.setViewportView(workArea);

        msgTabs.addTab("Message", jScrollPane1);

        errorArea.setColumns(20);
        errorArea.setRows(5);
        jScrollPane2.setViewportView(errorArea);

        msgTabs.addTab("Errors", jScrollPane2);

        fieMenu.setText("File");

        openPipeMenu.setText("Open");
        openPipeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPipeMenuActionPerformed(evt);
            }
        });
        fieMenu.add(openPipeMenu);

        jSeparator1.setToolTipText("");
        fieMenu.add(jSeparator1);

        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        fieMenu.add(exitMenu);

        jMenuBar1.add(fieMenu);

        helpMenu.setText("Help");
        helpMenu.setToolTipText("");

        aboutMenu.setText("About");
        aboutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenu);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(msgTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 905, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(msgTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void openPipeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openPipeMenuActionPerformed
        pipeRunner = null;
        refreshGUI();
        int returnVal = pipeChooser.showOpenDialog(this);
        if (returnVal == pipeChooser.APPROVE_OPTION) {
            File file = pipeChooser.getSelectedFile();
            pipeRunner = new PipeRunner("/" + file.getAbsolutePath());
            pipeRunner.addObserver(this);
            server.setRunner(pipeRunner);
            try {
                pipeRunner.start();
            } catch (UnitException ex) {
                System.out.println("Pipe creation fail");
                System.err.println(ex.getMessage());
            }
        } else {

        }
    }//GEN-LAST:event_openPipeMenuActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        if (pipeRunner != null) {
            pipeRunner.stop();
        }
    }//GEN-LAST:event_stopButtonActionPerformed

    private void aboutMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuActionPerformed
        JOptionPane.showMessageDialog(
                null,
                null,
                "About", JOptionPane.INFORMATION_MESSAGE,
                aboutImg);
    }//GEN-LAST:event_aboutMenuActionPerformed

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        System.exit(1);
    }//GEN-LAST:event_exitMenuActionPerformed

    @Override
    public void update(Observable o, Object arg) {
        refreshGUI();
    }

    class PipeCustomFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            return file.isDirectory() || file.getAbsolutePath().endsWith(".xml");
        }

        @Override
        public String getDescription() {
            return "Pipe sequence (*.xml)";
        }
    }

    class JAreaOutputStream extends OutputStream {

        private javax.swing.JTextArea textArea;

        public JAreaOutputStream(javax.swing.JTextArea textArea) {
            this.textArea = textArea;
        }

        @Override
        public void write(int b) throws IOException {
            textArea.append(String.valueOf((char) b));
            textArea.setCaretPosition(textArea.getDocument().getLength());
        }
    }

    public void refreshGUI() {
        if (pipeRunner == null) {
            semaphore.setIcon(offImage);
            stopButton.setEnabled(false);
            openPipeMenu.setEnabled(true);
            workArea.setText("");
            errorArea.setText("");
            return;
        }
        
        if(pipeRunner.isInError()){
            msgTabs.setSelectedIndex(1);
        }else{
            msgTabs.setSelectedIndex(0);
        }
        
        if (pipeRunner.isRunning()) {
            if (pipeRunner.isInError()) {
                stopButton.setEnabled(true);
                openPipeMenu.setEnabled(false);
                semaphore.setIcon(badImage);
            } else {
                stopButton.setEnabled(true);
                openPipeMenu.setEnabled(false);
                semaphore.setIcon(goodImage);
            }
        } else {
            if (pipeRunner.isInError()) {
                stopButton.setEnabled(false);
                openPipeMenu.setEnabled(true);
                semaphore.setIcon(badImage);
            } else {
                stopButton.setEnabled(false);
                openPipeMenu.setEnabled(true);
                semaphore.setIcon(offImage);
            }
        }
        revalidate();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenu;
    private javax.swing.JTextArea errorArea;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JMenu fieMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane msgTabs;
    private javax.swing.JMenuItem openPipeMenu;
    private javax.swing.JFileChooser pipeChooser;
    private javax.swing.JLabel semaphore;
    private javax.swing.JButton stopButton;
    private javax.swing.JTextArea workArea;
    // End of variables declaration//GEN-END:variables
}
